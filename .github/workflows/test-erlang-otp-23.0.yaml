name: Test - Erlang 23.0
on: push
jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-18.04
    outputs:
      build_start: ${{ steps.buildevents.outputs.build_start }}
      branch_or_tag_name: ${{ steps.buildevents.outputs.branch_or_tag_name }}
    steps:
    - name: RECORD BUILD START
      id: buildevents
      run: |
        echo "::set-output name=build_start::$(date +%s)"
        branch_or_tag_name=${GITHUB_REF#refs/*/}
        echo "::set-output name=branch_or_tag_name::$branch_or_tag_name"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: PREPARE BUILD IMAGE
      uses: docker/build-push-action@v1
      with:
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
        registry: eu.gcr.io
        repository: cf-rabbitmq-core/ci
        dockerfile: ci/dockerfiles/ci
        build_args: ERLANG_VERSION=23.0,GITHUB_RUN_ID=${{ github.run_id }},BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }},GITHUB_SHA=${{ github.sha }},base_rmq_ref=master,current_rmq_ref=${{ steps.buildevents.outputs.branch_or_tag_name }},RABBITMQ_VERSION=3.9.0
        tags: erlang-23.0-rabbitmq-${{ github.sha }}
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RECORD STEP FINISH
      run: |
        docker run \
          --env project=prepare \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.build_start }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/collect.sh
  xref:
    name: xref
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD XREF START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN XREF rabbit_common
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbit_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbit
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp_client
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=amqp_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp10_client
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=amqp10_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp10_common
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=amqp10_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_amqp1_0
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_amqp1_0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_cache
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_auth_backend_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_http
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_auth_backend_http \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_ldap
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_auth_backend_ldap \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_oauth2
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_auth_backend_oauth2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_mechanism_ssl
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_auth_mechanism_ssl \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_aws
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_cli
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_cli \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_consistent_hash_exchange
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_consistent_hash_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_event_exchange
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_event_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_federation
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_federation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_federation_management
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_federation_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_jms_topic_exchange
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_jms_topic_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_management
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_management_agent
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_management_agent \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_mqtt
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_common
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_peer_discovery_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_aws
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_peer_discovery_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_k8s
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_peer_discovery_k8s \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_consul
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_peer_discovery_consul \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_etcd
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_peer_discovery_etcd \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_prometheus
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_prometheus \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_random_exchange
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_random_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_recent_history_exchange
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_recent_history_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_sharding
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_sharding \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_shovel
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_shovel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_shovel_management
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_shovel_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_stomp
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_top
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_top \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_tracing
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_tracing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_trust_store
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_trust_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_dispatch
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_web_dispatch \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_mqtt
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_web_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_mqtt_examples
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_web_mqtt_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_stomp
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_web_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_stomp_examples
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:23.0
        docker run \
          --env project=rabbitmq_web_stomp_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/xref.sh
    - name: RECORD STEP FINISH
      if: always()
      run: |
        docker run \
          --env project=xref \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ci/scripts:/workspace/rabbitmq/ci/scripts \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:23.0 \
          ci/scripts/collect.sh
  rabbit_common:
    name: rabbit_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbit_common \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbit_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbit-checks:
    name: rabbit-checks
    needs:
    - prepare
    runs-on: ubuntu-18.04
    outputs:
      step_start: ${{ steps.buildevents.outputs.step_start }}
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: RUN CHECKS
      uses: docker/build-push-action@v1
      with:
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
        registry: eu.gcr.io
        repository: cf-rabbitmq-core/ci-rabbit
        dockerfile: ci/dockerfiles/ci-dep
        build_args: IMAGE_TAG=erlang-23.0-rabbitmq-${{ github.sha }},BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }},project=rabbit,SKIP_DIALYZE=False
        tags: erlang-23.0-rabbitmq-${{ github.sha }}
  rabbit-ct-unit_connection_tracking-plus-14-more:
    name: rabbit-ct-unit_connection_tracking-plus-14-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-unit_connection_tracking
      run: |
        mkdir ct-unit_connection_tracking-logs && chmod 777 ct-unit_connection_tracking-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_connection_tracking-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_connection_tracking-logs
        path: ct-unit_connection_tracking-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_plugin_directories
      run: |
        mkdir ct-unit_plugin_directories-logs && chmod 777 ct-unit_plugin_directories-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_directories \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_plugin_directories-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_plugin_directories-logs
        path: ct-unit_plugin_directories-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_cluster_formation_locking_mocks
      run: |
        mkdir ct-unit_cluster_formation_locking_mocks-logs && chmod 777 ct-unit_cluster_formation_locking_mocks-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_cluster_formation_locking_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_cluster_formation_locking_mocks-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_cluster_formation_locking_mocks-logs
        path: ct-unit_cluster_formation_locking_mocks-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_collections
      run: |
        mkdir ct-unit_collections-logs && chmod 777 ct-unit_collections-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_collections \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_collections-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_collections-logs
        path: ct-unit_collections-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-amqqueue_backward_compatibility
      run: |
        mkdir ct-amqqueue_backward_compatibility-logs && chmod 777 ct-amqqueue_backward_compatibility-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=amqqueue_backward_compatibility \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-amqqueue_backward_compatibility-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-amqqueue_backward_compatibility-logs
        path: ct-amqqueue_backward_compatibility-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_gm
      run: |
        mkdir ct-unit_gm-logs && chmod 777 ct-unit_gm-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_gm-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_gm-logs
        path: ct-unit_gm-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-msg_store
      run: |
        mkdir ct-msg_store-logs && chmod 777 ct-msg_store-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-msg_store-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-msg_store-logs
        path: ct-msg_store-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_operator_policy
      run: |
        mkdir ct-unit_operator_policy-logs && chmod 777 ct-unit_operator_policy-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_operator_policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_operator_policy-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_operator_policy-logs
        path: ct-unit_operator_policy-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_msg_store
      run: |
        mkdir ct-per_vhost_msg_store-logs && chmod 777 ct-per_vhost_msg_store-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_msg_store-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-per_vhost_msg_store-logs
        path: ct-per_vhost_msg_store-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-term_to_binary_compat_prop
      run: |
        mkdir ct-term_to_binary_compat_prop-logs && chmod 777 ct-term_to_binary_compat_prop-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=term_to_binary_compat_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-term_to_binary_compat_prop-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-term_to_binary_compat_prop-logs
        path: ct-term_to_binary_compat_prop-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmqctl_shutdown
      run: |
        mkdir ct-rabbitmqctl_shutdown-logs && chmod 777 ct-rabbitmqctl_shutdown-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_shutdown \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbitmqctl_shutdown-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-rabbitmqctl_shutdown-logs
        path: ct-rabbitmqctl_shutdown-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_amqp091_content_framing
      run: |
        mkdir ct-unit_amqp091_content_framing-logs && chmod 777 ct-unit_amqp091_content_framing-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_content_framing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_amqp091_content_framing-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_amqp091_content_framing-logs
        path: ct-unit_amqp091_content_framing-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_pg_local
      run: |
        mkdir ct-unit_pg_local-logs && chmod 777 ct-unit_pg_local-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_pg_local \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_pg_local-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_pg_local-logs
        path: ct-unit_pg_local-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_policy_validators
      run: |
        mkdir ct-unit_policy_validators-logs && chmod 777 ct-unit_policy_validators-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_policy_validators \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_policy_validators-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_policy_validators-logs
        path: ct-unit_policy_validators-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_plugin_versioning
      run: |
        mkdir ct-unit_plugin_versioning-logs && chmod 777 ct-unit_plugin_versioning-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_versioning \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_plugin_versioning-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_plugin_versioning-logs
        path: ct-unit_plugin_versioning-logs/*-ct-logs-*.tar.xz
  rabbit-ct-unit_priority_queue-plus-11-more:
    name: rabbit-ct-unit_priority_queue-plus-11-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-unit_priority_queue
      run: |
        mkdir ct-unit_priority_queue-logs && chmod 777 ct-unit_priority_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_priority_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_priority_queue-logs
        path: ct-unit_priority_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_supervisor2
      run: |
        mkdir ct-unit_supervisor2-logs && chmod 777 ct-unit_supervisor2-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_supervisor2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_supervisor2-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_supervisor2-logs
        path: ct-unit_supervisor2-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-sup_delayed_restart
      run: |
        mkdir ct-sup_delayed_restart-logs && chmod 777 ct-sup_delayed_restart-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sup_delayed_restart \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-sup_delayed_restart-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-sup_delayed_restart-logs
        path: ct-sup_delayed_restart-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_queue_consumers
      run: |
        mkdir ct-unit_queue_consumers-logs && chmod 777 ct-unit_queue_consumers-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_queue_consumers \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_queue_consumers-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_queue_consumers-logs
        path: ct-unit_queue_consumers-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control_credential_validation
      run: |
        mkdir ct-unit_access_control_credential_validation-logs && chmod 777 ct-unit_access_control_credential_validation-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_credential_validation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_access_control_credential_validation-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_access_control_credential_validation-logs
        path: ct-unit_access_control_credential_validation-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_log_config
      run: |
        mkdir ct-unit_log_config-logs && chmod 777 ct-unit_log_config-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_log_config-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_log_config-logs
        path: ct-unit_log_config-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_disk_monitor_mocks
      run: |
        mkdir ct-unit_disk_monitor_mocks-logs && chmod 777 ct-unit_disk_monitor_mocks-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_disk_monitor_mocks-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_disk_monitor_mocks-logs
        path: ct-unit_disk_monitor_mocks-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-peer_discovery_dns
      run: |
        mkdir ct-peer_discovery_dns-logs && chmod 777 ct-peer_discovery_dns-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_dns \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-peer_discovery_dns-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-peer_discovery_dns-logs
        path: ct-peer_discovery_dns-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-topic_permission
      run: |
        mkdir ct-topic_permission-logs && chmod 777 ct-topic_permission-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=topic_permission \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-topic_permission-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-topic_permission-logs
        path: ct-topic_permission-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-single_active_consumer
      run: |
        mkdir ct-single_active_consumer-logs && chmod 777 ct-single_active_consumer-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=single_active_consumer \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-single_active_consumer-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-single_active_consumer-logs
        path: ct-single_active_consumer-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-message_size_limit
      run: |
        mkdir ct-message_size_limit-logs && chmod 777 ct-message_size_limit-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=message_size_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-message_size_limit-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-message_size_limit-logs
        path: ct-message_size_limit-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-proxy_protocol
      run: |
        mkdir ct-proxy_protocol-logs && chmod 777 ct-proxy_protocol-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=proxy_protocol \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-proxy_protocol-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-proxy_protocol-logs
        path: ct-proxy_protocol-logs/*-ct-logs-*.tar.xz
  rabbit-ct-rabbit_fifo-plus-10-more:
    name: rabbit-ct-rabbit_fifo-plus-10-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-rabbit_fifo
      run: |
        mkdir ct-rabbit_fifo-logs && chmod 777 ct-rabbit_fifo-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_fifo-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-rabbit_fifo-logs
        path: ct-rabbit_fifo-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_app_management
      run: |
        mkdir ct-unit_app_management-logs && chmod 777 ct-unit_app_management-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_app_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_app_management-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_app_management-logs
        path: ct-unit_app_management-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_disk_monitor
      run: |
        mkdir ct-unit_disk_monitor-logs && chmod 777 ct-unit_disk_monitor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_disk_monitor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_disk_monitor-logs
        path: ct-unit_disk_monitor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_gen_server2
      run: |
        mkdir ct-unit_gen_server2-logs && chmod 777 ct-unit_gen_server2-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gen_server2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_gen_server2-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_gen_server2-logs
        path: ct-unit_gen_server2-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_credit_flow
      run: |
        mkdir ct-unit_credit_flow-logs && chmod 777 ct-unit_credit_flow-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_credit_flow \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_credit_flow-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_credit_flow-logs
        path: ct-unit_credit_flow-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-config_schema
      run: |
        mkdir ct-config_schema-logs && chmod 777 ct-config_schema-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=config_schema \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-config_schema-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-config_schema-logs
        path: ct-config_schema-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_vm_memory_monitor
      run: |
        mkdir ct-unit_vm_memory_monitor-logs && chmod 777 ct-unit_vm_memory_monitor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_vm_memory_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_vm_memory_monitor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_vm_memory_monitor-logs
        path: ct-unit_vm_memory_monitor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-mirrored_supervisor
      run: |
        mkdir ct-mirrored_supervisor-logs && chmod 777 ct-mirrored_supervisor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=mirrored_supervisor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-mirrored_supervisor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-mirrored_supervisor-logs
        path: ct-mirrored_supervisor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-definition_import
      run: |
        mkdir ct-definition_import-logs && chmod 777 ct-definition_import-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=definition_import \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-definition_import-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-definition_import-logs
        path: ct-definition_import-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_length_limits
      run: |
        mkdir ct-queue_length_limits-logs && chmod 777 ct-queue_length_limits-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_length_limits \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-queue_length_limits-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-queue_length_limits-logs
        path: ct-queue_length_limits-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-cluster
      run: |
        mkdir ct-cluster-logs && chmod 777 ct-cluster-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-cluster-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-cluster-logs
        path: ct-cluster-logs/*-ct-logs-*.tar.xz
  rabbit-ct-rabbitmq_queues_cli_integration-plus-9-more:
    name: rabbit-ct-rabbitmq_queues_cli_integration-plus-9-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-rabbitmq_queues_cli_integration
      run: |
        mkdir ct-rabbitmq_queues_cli_integration-logs && chmod 777 ct-rabbitmq_queues_cli_integration-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmq_queues_cli_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbitmq_queues_cli_integration-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-rabbitmq_queues_cli_integration-logs
        path: ct-rabbitmq_queues_cli_integration-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-list_queues_online_and_offline
      run: |
        mkdir ct-list_queues_online_and_offline-logs && chmod 777 ct-list_queues_online_and_offline-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_queues_online_and_offline \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-list_queues_online_and_offline-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-list_queues_online_and_offline-logs
        path: ct-list_queues_online_and_offline-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-list_consumers_sanity_check
      run: |
        mkdir ct-list_consumers_sanity_check-logs && chmod 777 ct-list_consumers_sanity_check-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_consumers_sanity_check \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-list_consumers_sanity_check-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-list_consumers_sanity_check-logs
        path: ct-list_consumers_sanity_check-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_int
      run: |
        mkdir ct-rabbit_fifo_int-logs && chmod 777 ct-rabbit_fifo_int-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_int \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_fifo_int-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-rabbit_fifo_int-logs
        path: ct-rabbit_fifo_int-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-policy
      run: |
        mkdir ct-policy-logs && chmod 777 ct-policy-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-policy-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-policy-logs
        path: ct-policy-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control_authn_authz_context_propagation
      run: |
        mkdir ct-unit_access_control_authn_authz_context_propagation-logs && chmod 777 ct-unit_access_control_authn_authz_context_propagation-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_authn_authz_context_propagation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_access_control_authn_authz_context_propagation-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_access_control_authn_authz_context_propagation-logs
        path: ct-unit_access_control_authn_authz_context_propagation-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_stats_and_metrics
      run: |
        mkdir ct-unit_stats_and_metrics-logs && chmod 777 ct-unit_stats_and_metrics-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_stats_and_metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_stats_and_metrics-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_stats_and_metrics-logs
        path: ct-unit_stats_and_metrics-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-disconnect_detected_during_alarm
      run: |
        mkdir ct-disconnect_detected_during_alarm-logs && chmod 777 ct-disconnect_detected_during_alarm-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=disconnect_detected_during_alarm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-disconnect_detected_during_alarm-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-disconnect_detected_during_alarm-logs
        path: ct-disconnect_detected_during_alarm-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-priority_queue_recovery
      run: |
        mkdir ct-priority_queue_recovery-logs && chmod 777 ct-priority_queue_recovery-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue_recovery \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-priority_queue_recovery-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-priority_queue_recovery-logs
        path: ct-priority_queue_recovery-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control
      run: |
        mkdir ct-unit_access_control-logs && chmod 777 ct-unit_access_control-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_access_control-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_access_control-logs
        path: ct-unit_access_control-logs/*-ct-logs-*.tar.xz
  rabbit-ct-product_info-plus-8-more:
    name: rabbit-ct-product_info-plus-8-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-product_info
      run: |
        mkdir ct-product_info-logs && chmod 777 ct-product_info-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=product_info \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-product_info-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-product_info-logs
        path: ct-product_info-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_file_handle_cache
      run: |
        mkdir ct-unit_file_handle_cache-logs && chmod 777 ct-unit_file_handle_cache-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_file_handle_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_file_handle_cache-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_file_handle_cache-logs
        path: ct-unit_file_handle_cache-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_amqp091_server_properties
      run: |
        mkdir ct-unit_amqp091_server_properties-logs && chmod 777 ct-unit_amqp091_server_properties-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_server_properties \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_amqp091_server_properties-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_amqp091_server_properties-logs
        path: ct-unit_amqp091_server_properties-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_config_value_encryption
      run: |
        mkdir ct-unit_config_value_encryption-logs && chmod 777 ct-unit_config_value_encryption-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_config_value_encryption \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_config_value_encryption-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_config_value_encryption-logs
        path: ct-unit_config_value_encryption-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmqctl_integration
      run: |
        mkdir ct-rabbitmqctl_integration-logs && chmod 777 ct-rabbitmqctl_integration-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbitmqctl_integration-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-rabbitmqctl_integration-logs
        path: ct-rabbitmqctl_integration-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-feature_flags
      run: |
        mkdir ct-feature_flags-logs && chmod 777 ct-feature_flags-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=feature_flags \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-feature_flags-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-feature_flags-logs
        path: ct-feature_flags-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-channel_interceptor
      run: |
        mkdir ct-channel_interceptor-logs && chmod 777 ct-channel_interceptor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_interceptor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-channel_interceptor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-channel_interceptor-logs
        path: ct-channel_interceptor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-channel_operation_timeout
      run: |
        mkdir ct-channel_operation_timeout-logs && chmod 777 ct-channel_operation_timeout-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_operation_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-channel_operation_timeout-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-channel_operation_timeout-logs
        path: ct-channel_operation_timeout-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_log_management
      run: |
        mkdir ct-unit_log_management-logs && chmod 777 ct-unit_log_management-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_log_management-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-unit_log_management-logs
        path: ct-unit_log_management-logs/*-ct-logs-*.tar.xz
  rabbit-ct-many_node_ha-plus-6-more:
    name: rabbit-ct-many_node_ha-plus-6-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-many_node_ha
      run: |
        mkdir ct-many_node_ha-logs && chmod 777 ct-many_node_ha-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=many_node_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-many_node_ha-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-many_node_ha-logs
        path: ct-many_node_ha-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-upgrade_preparation
      run: |
        mkdir ct-upgrade_preparation-logs && chmod 777 ct-upgrade_preparation-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=upgrade_preparation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-upgrade_preparation-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-upgrade_preparation-logs
        path: ct-upgrade_preparation-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_connection_limit_partitions
      run: |
        mkdir ct-per_vhost_connection_limit_partitions-logs && chmod 777 ct-per_vhost_connection_limit_partitions-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit_partitions \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_connection_limit_partitions-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-per_vhost_connection_limit_partitions-logs
        path: ct-per_vhost_connection_limit_partitions-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-consumer_timeout
      run: |
        mkdir ct-consumer_timeout-logs && chmod 777 ct-consumer_timeout-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=consumer_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-consumer_timeout-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-consumer_timeout-logs
        path: ct-consumer_timeout-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-crashing_queues
      run: |
        mkdir ct-crashing_queues-logs && chmod 777 ct-crashing_queues-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=crashing_queues \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-crashing_queues-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-crashing_queues-logs
        path: ct-crashing_queues-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-lazy_queue
      run: |
        mkdir ct-lazy_queue-logs && chmod 777 ct-lazy_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=lazy_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-lazy_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-lazy_queue-logs
        path: ct-lazy_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-sync_detection
      run: |
        mkdir ct-sync_detection-logs && chmod 777 ct-sync_detection-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sync_detection \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-sync_detection-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-sync_detection-logs
        path: ct-sync_detection-logs/*-ct-logs-*.tar.xz
  rabbit-ct-publisher_confirms_parallel-plus-5-more:
    name: rabbit-ct-publisher_confirms_parallel-plus-5-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-publisher_confirms_parallel
      run: |
        mkdir ct-publisher_confirms_parallel-logs && chmod 777 ct-publisher_confirms_parallel-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=publisher_confirms_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-publisher_confirms_parallel-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-publisher_confirms_parallel-logs
        path: ct-publisher_confirms_parallel-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_tracking
      run: |
        mkdir ct-per_user_connection_tracking-logs && chmod 777 ct-per_user_connection_tracking-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_user_connection_tracking-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-per_user_connection_tracking-logs
        path: ct-per_user_connection_tracking-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-peer_discovery_classic_config
      run: |
        mkdir ct-peer_discovery_classic_config-logs && chmod 777 ct-peer_discovery_classic_config-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_classic_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-peer_discovery_classic_config-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-peer_discovery_classic_config-logs
        path: ct-peer_discovery_classic_config-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_queue_limit
      run: |
        mkdir ct-per_vhost_queue_limit-logs && chmod 777 ct-per_vhost_queue_limit-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_queue_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_queue_limit-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-per_vhost_queue_limit-logs
        path: ct-per_vhost_queue_limit-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-confirms_rejects
      run: |
        mkdir ct-confirms_rejects-logs && chmod 777 ct-confirms_rejects-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=confirms_rejects \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-confirms_rejects-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-confirms_rejects-logs
        path: ct-confirms_rejects-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-metrics
      run: |
        mkdir ct-metrics-logs && chmod 777 ct-metrics-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-metrics-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-metrics-logs
        path: ct-metrics-logs/*-ct-logs-*.tar.xz
  rabbit-ct-signal_handling-plus-3-more:
    name: rabbit-ct-signal_handling-plus-3-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-signal_handling
      run: |
        mkdir ct-signal_handling-logs && chmod 777 ct-signal_handling-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=signal_handling \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-signal_handling-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-signal_handling-logs
        path: ct-signal_handling-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_prop
      run: |
        mkdir ct-rabbit_fifo_prop-logs && chmod 777 ct-rabbit_fifo_prop-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_fifo_prop-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-rabbit_fifo_prop-logs
        path: ct-rabbit_fifo_prop-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-dead_lettering
      run: |
        mkdir ct-dead_lettering-logs && chmod 777 ct-dead_lettering-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dead_lettering \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-dead_lettering-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-dead_lettering-logs
        path: ct-dead_lettering-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-maintenance_mode
      run: |
        mkdir ct-maintenance_mode-logs && chmod 777 ct-maintenance_mode-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=maintenance_mode \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-maintenance_mode-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-maintenance_mode-logs
        path: ct-maintenance_mode-logs/*-ct-logs-*.tar.xz
  rabbit-ct-vhost-plus-2-more:
    name: rabbit-ct-vhost-plus-2-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-vhost
      run: |
        mkdir ct-vhost-logs && chmod 777 ct-vhost-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=vhost \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-vhost-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-vhost-logs
        path: ct-vhost-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_core_metrics_gc
      run: |
        mkdir ct-rabbit_core_metrics_gc-logs && chmod 777 ct-rabbit_core_metrics_gc-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_core_metrics_gc \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_core_metrics_gc-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-rabbit_core_metrics_gc-logs
        path: ct-rabbit_core_metrics_gc-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-dynamic_qq
      run: |
        mkdir ct-dynamic_qq-logs && chmod 777 ct-dynamic_qq-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_qq \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-dynamic_qq-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-dynamic_qq-logs
        path: ct-dynamic_qq-logs/*-ct-logs-*.tar.xz
  rabbit-ct-priority_queue-plus-2-more:
    name: rabbit-ct-priority_queue-plus-2-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-priority_queue
      run: |
        mkdir ct-priority_queue-logs && chmod 777 ct-priority_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-priority_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-priority_queue-logs
        path: ct-priority_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_connection_limit
      run: |
        mkdir ct-per_vhost_connection_limit-logs && chmod 777 ct-per_vhost_connection_limit-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_connection_limit-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-per_vhost_connection_limit-logs
        path: ct-per_vhost_connection_limit-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_parallel
      run: |
        mkdir ct-queue_parallel-logs && chmod 777 ct-queue_parallel-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-queue_parallel-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-queue_parallel-logs
        path: ct-queue_parallel-logs/*-ct-logs-*.tar.xz
  rabbit-ct-cluster_rename-plus-1-more:
    name: rabbit-ct-cluster_rename-plus-1-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-cluster_rename
      run: |
        mkdir ct-cluster_rename-logs && chmod 777 ct-cluster_rename-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster_rename \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-cluster_rename-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-cluster_rename-logs
        path: ct-cluster_rename-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-backing_queue
      run: |
        mkdir ct-backing_queue-logs && chmod 777 ct-backing_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=backing_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-backing_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-backing_queue-logs
        path: ct-backing_queue-logs/*-ct-logs-*.tar.xz
  rabbit-ct-queue_master_location-plus-1-more:
    name: rabbit-ct-queue_master_location-plus-1-more
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-queue_master_location
      run: |
        mkdir ct-queue_master_location-logs && chmod 777 ct-queue_master_location-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_master_location \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-queue_master_location-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-queue_master_location-logs
        path: ct-queue_master_location-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-simple_ha
      run: |
        mkdir ct-simple_ha-logs && chmod 777 ct-simple_ha-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=simple_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-simple_ha-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-simple_ha-logs
        path: ct-simple_ha-logs/*-ct-logs-*.tar.xz
  rabbit-ct-eager_sync:
    name: rabbit-ct-eager_sync
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-eager_sync
      run: |
        mkdir ct-eager_sync-logs && chmod 777 ct-eager_sync-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=eager_sync \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-eager_sync-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-eager_sync-logs
        path: ct-eager_sync-logs/*-ct-logs-*.tar.xz
  rabbit-ct-quorum_queue:
    name: rabbit-ct-quorum_queue
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-quorum_queue
      run: |
        mkdir ct-quorum_queue-logs && chmod 777 ct-quorum_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=quorum_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-quorum_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-quorum_queue-logs
        path: ct-quorum_queue-logs/*-ct-logs-*.tar.xz
  rabbit-ct-clustering_management:
    name: rabbit-ct-clustering_management
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-clustering_management
      run: |
        mkdir ct-clustering_management-logs && chmod 777 ct-clustering_management-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=clustering_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-clustering_management-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-clustering_management-logs
        path: ct-clustering_management-logs/*-ct-logs-*.tar.xz
  rabbit-ct-dynamic_ha:
    name: rabbit-ct-dynamic_ha
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PULL IMAGE
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
    - name: RUN ct-dynamic_ha
      run: |
        mkdir ct-dynamic_ha-logs && chmod 777 ct-dynamic_ha-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-dynamic_ha-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: always()
      with:
        name: rabbit-ct-dynamic_ha-logs
        path: ct-dynamic_ha-logs/*-ct-logs-*.tar.xz
  rabbit:
    name: rabbit
    needs:
    - rabbit-checks
    - rabbit-ct-unit_connection_tracking-plus-14-more
    - rabbit-ct-unit_priority_queue-plus-11-more
    - rabbit-ct-rabbit_fifo-plus-10-more
    - rabbit-ct-rabbitmq_queues_cli_integration-plus-9-more
    - rabbit-ct-product_info-plus-8-more
    - rabbit-ct-many_node_ha-plus-6-more
    - rabbit-ct-publisher_confirms_parallel-plus-5-more
    - rabbit-ct-signal_handling-plus-3-more
    - rabbit-ct-vhost-plus-2-more
    - rabbit-ct-priority_queue-plus-2-more
    - rabbit-ct-cluster_rename-plus-1-more
    - rabbit-ct-queue_master_location-plus-1-more
    - rabbit-ct-eager_sync
    - rabbit-ct-quorum_queue
    - rabbit-ct-clustering_management
    - rabbit-ct-dynamic_ha
    runs-on: ubuntu-18.04
    if: always()
    steps:
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RECORD STEP FINISH
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }}
        docker run \
          --env project=rabbit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ needs.rabbit-checks.outputs.step_start }} \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-23.0-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/collect.sh
  amqp_client:
    name: amqp_client
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp_client \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp_client-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  amqp10_common:
    name: amqp10_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp10_common \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp10_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_cache:
    name: rabbitmq_auth_backend_cache
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_cache \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_cache-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_http:
    name: rabbitmq_auth_backend_http
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_http \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_http-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_oauth2:
    name: rabbitmq_auth_backend_oauth2
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_oauth2 \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_oauth2-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_mechanism_ssl:
    name: rabbitmq_auth_mechanism_ssl
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_mechanism_ssl \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_mechanism_ssl-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_aws:
    name: rabbitmq_aws
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_aws \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_aws-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_cli:
    name: rabbitmq_cli
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir broker-logs && chmod 777 broker-logs
        docker run \
          --env project=rabbitmq_cli \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/broker-logs:/workspace/broker-logs \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/rabbitmq_cli.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_cli-broker-logs
        path: broker-logs/broker-logs.tar.xz
  rabbitmq_consistent_hash_exchange:
    name: rabbitmq_consistent_hash_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_consistent_hash_exchange \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_consistent_hash_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_event_exchange:
    name: rabbitmq_event_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_event_exchange \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_event_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_federation:
    name: rabbitmq_federation
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_federation \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_federation-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_federation_management:
    name: rabbitmq_federation_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_federation_management \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_federation_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_jms_topic_exchange:
    name: rabbitmq_jms_topic_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_jms_topic_exchange \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_jms_topic_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_management:
    name: rabbitmq_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_management \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_management_agent:
    name: rabbitmq_management_agent
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_management_agent \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_management_agent-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_common:
    name: rabbitmq_peer_discovery_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_common \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_k8s:
    name: rabbitmq_peer_discovery_k8s
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_k8s \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_k8s-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_consul:
    name: rabbitmq_peer_discovery_consul
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_consul \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_consul-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_prometheus:
    name: rabbitmq_prometheus
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_prometheus \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_prometheus-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_random_exchange:
    name: rabbitmq_random_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_random_exchange \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_random_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_recent_history_exchange:
    name: rabbitmq_recent_history_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_recent_history_exchange \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_recent_history_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_sharding:
    name: rabbitmq_sharding
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_sharding \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_sharding-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_shovel:
    name: rabbitmq_shovel
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_shovel \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_shovel-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_shovel_management:
    name: rabbitmq_shovel_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_shovel_management \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_shovel_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_stomp:
    name: rabbitmq_stomp
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_stomp \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_stomp-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_top:
    name: rabbitmq_top
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_top \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_top-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_tracing:
    name: rabbitmq_tracing
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_tracing \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_tracing-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_trust_store:
    name: rabbitmq_trust_store
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_trust_store \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_trust_store-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_dispatch:
    name: rabbitmq_web_dispatch
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_dispatch \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_dispatch-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_mqtt:
    name: rabbitmq_web_mqtt
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_mqtt \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_mqtt-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_mqtt_examples:
    name: rabbitmq_web_mqtt_examples
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_mqtt_examples \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_mqtt_examples-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_stomp:
    name: rabbitmq_web_stomp
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_stomp \
          --env SKIP_DIALYZE=True \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_stomp-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_stomp_examples:
    name: rabbitmq_web_stomp_examples
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RUN TESTS
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_stomp_examples \
          --env SKIP_DIALYZE=False \
          --env SKIP_XREF=False \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_stomp_examples-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  package-generic-unix:
    name: package-generic-unix
    needs:
    - prepare
    runs-on: ubuntu-18.04
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: PACKAGE GENERIC UNIX
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        mkdir PACKAGES && chmod 777 PACKAGES
        docker run \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/PACKAGES:/workspace/rabbitmq/PACKAGES \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/package_generic_unix.sh
    - name: UPLOAD GENERIC UNIX PACKAGE ARTIFACT
      uses: actions/upload-artifact@v2-preview
      with:
        name: rabbitmq-server-generic-unix.tar.xz
        path: PACKAGES/rabbitmq-server-generic-unix-*.tar.xz
    - name: RECORD STEP FINISH
      if: always()
      run: |
        docker run \
          --env project=packaging \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/collect.sh
  finish:
    name: finish
    needs:
    - prepare
    - rabbit_common
    - rabbit
    - amqp_client
    - amqp10_common
    - rabbitmq_auth_backend_cache
    - rabbitmq_auth_backend_http
    - rabbitmq_auth_backend_oauth2
    - rabbitmq_auth_mechanism_ssl
    - rabbitmq_aws
    - rabbitmq_cli
    - rabbitmq_consistent_hash_exchange
    - rabbitmq_event_exchange
    - rabbitmq_federation
    - rabbitmq_federation_management
    - rabbitmq_jms_topic_exchange
    - rabbitmq_management
    - rabbitmq_management_agent
    - rabbitmq_peer_discovery_common
    - rabbitmq_peer_discovery_k8s
    - rabbitmq_peer_discovery_consul
    - rabbitmq_prometheus
    - rabbitmq_random_exchange
    - rabbitmq_recent_history_exchange
    - rabbitmq_sharding
    - rabbitmq_shovel
    - rabbitmq_shovel_management
    - rabbitmq_stomp
    - rabbitmq_top
    - rabbitmq_tracing
    - rabbitmq_trust_store
    - rabbitmq_web_dispatch
    - rabbitmq_web_mqtt
    - rabbitmq_web_mqtt_examples
    - rabbitmq_web_stomp
    - rabbitmq_web_stomp_examples
    runs-on: ubuntu-18.04
    if: always()
    steps:
    - uses: technote-space/workflow-conclusion-action@v1
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RECORD BUILD FINISH
      run: |
        gcloud auth configure-docker
        docker pull eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }}
        docker run \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env BUILD_START=${{ needs.prepare.outputs.build_start }} \
          --env BUILD_RESULT=${{ env.WORKFLOW_CONCLUSION }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-23.0-rabbitmq-${{ github.sha }} \
          ci/scripts/finish.sh
