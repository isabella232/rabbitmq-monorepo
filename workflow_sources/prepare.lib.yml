#@ load("@ytt:data", "data")
#@ load("util.lib.yml", "to_build_args")
#@ load("helpers.lib.yml", "ci_image", "ci_image_tag", "should_skip_xref")

#@ def prepare_jobs():
#!base_image:
#!  name: base_image
#!  runs-on: ubuntu-18.04
#!  #@yaml/text-templated-strings
#!  steps:
#!    - name: CHECKOUT REPOSITORY
#!      uses: actions/checkout@v2
#!    - name: CREATE BASE CI IMAGE
#!      uses: docker/build-push-action@v1
#!      with:
#!        username: _json_key
#!        password: ${{ secrets.GCR_JSON_KEY }}
#!        registry: eu.gcr.io
#!        repository: cf-rabbitmq-core/ci-base
#!        dockerfile: ci_dockerfiles/(@= data.values.versions.erlang @)/base
#!        tags: #@ data.values.versions.erlang
prepare:
  name: prepare
#!  needs: [base_image]
  runs-on: ubuntu-18.04
  outputs:
    build_start: ${{ steps.buildevents.outputs.build_start }}
    branch_or_tag_name: ${{ steps.buildevents.outputs.branch_or_tag_name }}
  #@yaml/text-templated-strings
  steps:
    - name: RECORD BUILD START
      id: buildevents
      run: |
        echo "::set-output name=build_start::$(date +%s)"
        branch_or_tag_name=${GITHUB_REF#refs/*/}
        echo "::set-output name=branch_or_tag_name::$branch_or_tag_name"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: PREPARE BUILD IMAGE
      uses: docker/build-push-action@v1
      with:
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
        registry: eu.gcr.io
        repository: cf-rabbitmq-core/ci
        dockerfile: ci/dockerfiles/ci
        #@ build_args = {}
        #@ build_args["ERLANG_VERSION"] = data.values.versions.erlang
        #@ build_args["GITHUB_RUN_ID"] = '${{ github.run_id }}'
        #@ build_args["BUILDEVENT_APIKEY"] = '${{ secrets.HONEYCOMB_API_KEY }}'
        #@ build_args["GITHUB_SHA"] = '${{ github.sha }}'
        #@ build_args["base_rmq_ref"] = data.values.base_rmq_ref
        #@ build_args["current_rmq_ref"] = '${{ steps.buildevents.outputs.branch_or_tag_name }}'
        build_args: #@ to_build_args(build_args)
        tags: (@= ci_image_tag() @)
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RECORD STEP FINISH
      run: |
        docker run \
          --env project=prepare \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.build_start }} \
          (@= ci_image() @) \
          ci/scripts/collect.sh
xref:
  name: xref
  runs-on: ubuntu-18.04
  #@yaml/text-templated-strings
  steps:
    - name: RECORD XREF START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    #@ base_image = "eu.gcr.io/cf-rabbitmq-core/ci-base:" + data.values.versions.erlang
    #@ for dep in [d for d in data.values.deps if not should_skip_xref(d)]:
    - name: RUN XREF (@= dep.name @)
      run: |
        gcloud auth configure-docker
        docker pull (@= base_image @)
        docker run \
          --env project=(@= dep.name @) \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          (@= base_image @) \
          ci/scripts/xref.sh
    #@ end
    - name: RECORD STEP FINISH
      if: always()
      run: |
        docker run \
          --env project=xref \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ci/scripts:/workspace/rabbitmq/ci/scripts \
          --workdir /workspace/rabbitmq \
          (@= base_image @) \
          ci/scripts/collect.sh
#@ end